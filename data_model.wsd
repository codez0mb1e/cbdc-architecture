@startuml
title "Цифровой рубль: Модель данных"
caption © 2025, Хакатонщики Team. MIT License.
footer Last updated at 2025-06-22.
scale 2

namespace BlockchainLayer {

    entity Address {
        Уникальный адрес (неизменяемая сущность).
        --
        Включает в себя адреса смарт-контрактов и обычных пользователей.
        Включает в себя специальный `0x0000`-адрес для сжигания и создания токенов.
        ==
        +hex: str!
        +type: Literal["UserWallet", "SmartContract"]
    }

    entity Transaction {
        Транзакция.
        --
        Транзакция может быть обычной (перевод Цифровых рублей или токенов) или 
        специальной (вызов смарт-контрактов).
        ==
        .. Generic ..
        +hash: str!
        +from: Address
        +to: Address
        +amount: decimal
        +state: Literal["Pending", "Confirmed", "Failed"]
        +error: str?
        +created_at: datetime
        .. Contracts invocation related ..
        +internal_transactions: list[Calls]?
        +logs: list[byte[]]?
        .. Protocol specific ..
        +input_data: byte[]?
        +block_number: uint64?
        +block_hash: str?
        +confirmations_n: uint64
        .. Fee related ..
        +fee: float
    }


    entity Contract {
        Смарт-контракт (неизменяемая сущность).
        --
        Смарт-контракт может быть специального типа (например, взамозаменяемый токен) 
        или общим (например, для управления активами).
        ==
        +name: str?
        +ABI: byte[]
        +type: Literal["None", "CB-20", "CB-721"]
    }
    Address <|-- Contract
    Address .. Contract : < deployed_by:{address.hex}|deployed_at:(datetime)
    Address .. Contract : < initiated_by:{address.hex}
    Contract .. Transaction : > created_in:{transaction.hash}


    class Block {
        Блок в Блокчейне.
        --
        Блок содержит список транзакций и метаданные о блоке.
        Блоки могут быть пустыми (например, в случае создания нового блока) или
        содержать транзакции.
        ==
        +hash: str!
        +parent_hash: str
        +timestamp: datetime
        +height: uint64
        +total_difficulty: uint32
        +block_reward: decimal
        +status: Literal["Pending", "Mined", "Orphaned"]
    }
    Block .. Transaction : > include_transactions:{transaction.hash}
    Block .. Address : > mined_by:{address.hex}
}


namespace PaymentsProcessing {
    entity Balances {
        Баланс.
        --
        Баланс может быть в разных токенах.
        ==
        -_balances: dict[Address, decimal]
    }

    class Wallet {
        Кошелек пользователя.
        --
        Используется для хранения и управления цифровыми активами.
        Кошелек может быть связан с несколькими адресами.
        ==
        +get_balances(address: Address?): dict[Address, Balances]
        +get_transactions(address: Address?): dict[Address, list[Transaction][]
        +status: Literal["Active", "Inactive", "Frozen"]
        +limits: dict[str, float]
    }
    Wallet o-- Address : > associated_with_addresses:{address.hex}


    class Vault {
        Хранилище цифровых активов (Vault).
        --
        Специальный тип кошелька, который как хранилище для цифровых активов.
        Хранилище может быть управляться несколькими адресами или через логику Смарт-контракта.
        Используется для сделок с обеспечением при кредитовании/недостаточности средств у клиентов.
        ==
        +name: str?
        +get_balances(): Balances
        +depositTo(address: Address, amount: decimal): Transaction
        +withdrawFrom(address: Address, amount: decimal): Transaction
    }
    Vault o-- Address : > has_address:{address.hex}
    Vault -- Address : > managed_by:{address.hex}


    class Transfers {
        Специальный тип транзакции.
        ==
        .. Generic ..
        +id: str!
        +amount: decimal
        +token: Address
        +created_at: datetime
        +from: Address
        +to: Address
        .. Transaction related ..
        _transaction: Transaction
        +commit(): Transaction
        +revert(): Transaction
        +get_status(): Literal["Pending", "Confirmed", "Failed"]
    }
    Transfers .. Wallet : > from:{wallet.id}
    Transfers .. Wallet : > to:{wallet.id}
}


namespace Accounting {

    abstract class Account {
        Digital Account entity
        ==
        +id: str!
        +wallets: list[Wallet]
    }
    Account o-- Wallet : > has_wallets:{wallet.hex}

    class FAccount {
        Fiat Account entity
        --
        Contains:
        - list of classic Bank accounts
        - mapping the issuer Banks to their corresponding Digital twin

        TODO: Move to interoperability layer
        ==
        +frozen(amount: decimal): Transaction
        +unfrozen(amount: decimal): Transaction
        +transferToWallet(wallet: Wallet, amount: decimal): Transaction
    }
    
    class BusinessAccount {
        Business Account entity
        --
        TODO: add additional fields from CB docs
        ==
    }
    Account <|-- BusinessAccount

    class PrivatePersonAccount {
        Private Person Account entity
        --
        TODO: add additional fields from CB docs
        ==
    }
    Account <|-- PrivatePersonAccount
}


namespace DigitalRubble {
    class DigitalRubbleSmartContract {
        Digital Rubble Smart Contract entity
        ==
        .. Transfers ..
        +transfer(from: Address, to: Address, amount: decimal): Transaction
        .. Swap and Exchange ..
        +mint(to: Address, amount: decimal): Transaction
        +burn(from: Address, amount: decimal): Transaction
        .. Fraud and Collateral purposes ..
        +frozen(address: Address, amount: decimal?): Transaction
        +unfrozen(address: Address, amount: decimal?): Transaction
    }

    class Справочники {
        Справочник entity
        --
        -blocked_accounts: list[Account]
        -frozen_wallets: list[Wallet]
        -СУПлЦ_лист: list[str]
}


@enduml
