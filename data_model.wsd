@startuml
title Digital Rubble: Data Model
caption © 2025, Хакатонщики Team. All rights reserved.
footer Last updated at 2025-06-21.
scale 2




namespace BlockchainLayer {

    entity Address {
        Address entity
        --
        Has entity `NULL` address for burn and mint
        (0x00000000000000000000000000000000000)
        ==
        +hex: str!
    }

    entity Contract {
        Contract entity
        ==
        +hex: str!
        +name: str?
        +type: int
    }
    Contract o.. Address : > has_address:{address.hex}
    Address .. Contract : < deployed_by:{address.hex}|deployed_at:(datetime)
    Address .. Contract : < initiated_by:{address.hex}
    note left of Contract::type
        Contract types: None, 20, 721
    end note

    entity Transaction {
        Transaction entity
        ==
        .. Generic ..
        +hash: str!
        +from: Address
        +to: Address
        +amount: float
        +state: str
        +timestamp: datetime
        .. Protocol Specific ..
        +block_number: int64?
        +block_hash: str?
        +confirmations: int64
        .. Fee related ..
        +fee: float
        +gas_used: int64
        +gas_limit: int64
        +gas_price: float
        .. Contract invocation related ..
        +calls: list[Any]
        +logs: list[Any]
    }

    class Block {
        Block entity
        ==
        +number: int64!
        +hash: str!
        +parent_hash: str
        +timestamp: datetime
        +total_difficulty: int64
        +block_reward: float
        +status: Literal["pending", "mined", "orphaned"]
    }
    Block o.. Transaction : > has_transactions:{transaction.hash}
    Block o.. Address : > involved_address:{address.hex}
    Block o.. Address : > mined_by:{address.hex}
}


namespace PaymentsProcessing {
    class Wallet {
        Wallet entity
        ==
        +id: hex!
        +get_balance(): decimal
        +get_transactions(): list[Transaction]
        +status: Literal["active", "inactive", "frozen"]
        +limits: dict[str, float]
    }
    Wallet o-- Address : > funded_by:{address.hex}
    Wallet o-- Transaction : > has_transactions:{transaction.hash}

    class Transfers {
        Transfers entity
        ==
        +id: str!
        +amount: decimal
        +timestamp: datetime
        +from: Wallet
        +to: Wallet
    }
    Transfers o-- Wallet : > from:{wallet.id}
    Transfers o-- Wallet : > to:{wallet.id}
}


namespace Accounting {

    abstract class Account {
        Digital Account entity
        ==
        +id: str!
        +wallets: list[Wallet]
    }
    Account o-- Wallet : > has_wallets:{wallet.hex}

    class FAccount {
        Fiat Account entity
        --
        Contains:
        - list of classic Bank accounts
        - mapping the issuer Banks to their corresponding Digital twin

        TODO: Move to interoperability layer
        ==
        +frozen(amount: decimal): Transaction
        +unfrozen(amount: decimal): Transaction
        +transferToWallet(wallet: Wallet, amount: decimal): Transaction
    }
    
    class BusinessAccount {
        Business Account entity
        --
        TODO: add additional fields from CB docs
        ==
    }
    Account <|-- BusinessAccount

    class PrivatePersonAccount {
        Private Person Account entity
        --
        TODO: add additional fields from CB docs
        ==
    }
    Account <|-- PrivatePersonAccount

    class Vault {
        Vault entity
        --
        TODO: sync naming with industrial practices
        ==
        +hex: str!
        +name: str?
        +depositToWallet(wallet: Wallet, amount: float): Transaction
        +withdrawFromWallet(wallet: Wallet, amount: float): Transaction
    }
    Vault o-- Address : > has_address:{address.hex}
    Vault o-- Account : > owner:{account.id}
}


namespace DigitalRubble {
    class DigitalRubbleSmartContract {
        Digital Rubble Smart Contract entity
        ==
        .. Transfers ..
        +transfer(from: Address, to: Address, amount: decimal): Transaction
        .. Swap and Exchange ..
        +mint(to: Address, amount: decimal): Transaction
        +burn(from: Address, amount: decimal): Transaction
        .. Fraud and Collateral purposes ..
        +frozen(address: Address, amount: decimal?): Transaction
        +unfrozen(address: Address, amount: decimal?): Transaction
    }

    class Справочники {
        Справочник entity
        --
        -blocked_accounts: list[Account]
        -frozen_wallets: list[Wallet]
        -СУПлЦ_лист: list[str]
}


@enduml
