@startuml
title "Цифровой рубль: Модель данных"
caption © 2025, Хакатонщики Team. MIT License.
footer Last updated at 2025-06-22.
scale 2

namespace BlockchainLayer {

    entity Address {
        Уникальный адрес (неизменяемая сущность).
        --
        Включает в себя адреса смарт-контрактов и 
        обычных пользователей.

        Включает в себя специальный `0x0000`-адрес 
        для сжигания и создания токенов.
        ==
        +hex: str!
        +type: Literal["UserWallet", "SmartContract"]
    }

    entity Transaction {
        Транзакция.
        --
        Транзакция может быть обычной (перевод 
        Цифровых рублей или токенов) или 
        специальной (вызов смарт-контрактов).
        ==
        .. Generic ..
        +hash: str!
        +from: Address
        +to: Address
        +amount: decimal
        +state: Literal["Pending", "Confirmed", "Failed"]
        +error: str?
        +created_at: datetime
        .. Contracts invocation related ..
        +internal_transactions: list[Calls]?
        +logs: list[byte[]]?
        .. Protocol specific ..
        +input_data: byte[]?
        +block_number: uint64?
        +block_hash: str?
        +confirmations_n: uint64
        .. Fee related ..
        +fee: float
    }


    entity SmartContract {
        Смарт-контракт (неизменяемая сущность).
        --
        Смарт-контракт может быть специального типа (например, 
        взамозаменяемый токен) или общим (например, 
        для управления активами).
        ==
        +name: str?
        +ABI: byte[]
        +type: Literal["None", "CB-20", "CB-721"]
    }
    SmartContract -u-|> Address
    Address .. SmartContract : < deployed_by:{address.hex}|deployed_at:(datetime)
    Address .. SmartContract : < initiated_by:{address.hex}
    SmartContract .. Transaction : > created_in:{transaction.hash}


    entity Block {
        Блок в Блокчейне.
        --
        Блок содержит список транзакций и метаданные о блоке.
        Блоки могут быть пустыми (например, в случае создания 
        нового блока) или содержать транзакции.
        ==
        +hash: str!
        +parent_hash: str
        +timestamp: datetime
        +height: uint64
        +total_difficulty: uint32
        +block_reward: decimal
        +status: Literal["Pending", "Mined", "Orphaned"]
    }
    Block o.l. Transaction : > include_transactions:{transaction.hash}
    Block .u. Address : > mined_by:{address.hex}
}


namespace PaymentsProcessing {
    class Balances {
        Баланс.
        --
        Представляет собой словарь, где 
        ключ - адрес токена, а значение -
        баланс токена.
        ==
        -_balances: dict[Address, decimal]
    }
    Balances .d. Address : > has_address:{address.hex}

    entity Wallet {
        Кошелек пользователя.
        --
        Используется для хранения и управления
        цифровыми активами.

        Кошелек может быть связан с несколькими адресами.
        ==
        +get_balances(address: Address?): dict[Address, Balances]
        +get_transactions(address: Address?): dict[Address, list[Transaction][]
        +status: Literal["Active", "Inactive", "Frozen"]
        +limits: dict[str, float]
    }
    Wallet o-- Address : > associated_with_addresses:{address.hex}
    Wallet *.d. Balances : > has_balances:{address.hex}


    entity Vault {
        Хранилище цифровых активов (Vault).
        --
        Специальный тип кошелька, который как хранилище 
        для цифровых активов.

        Хранилище может быть управляться несколькими адресами 
        или через логику Смарт-контракта.

        Используется для сделок с обеспечением при кредитовании 
        или недостаточности средств у клиентов.
        ==
        +name: str?
        +get_balances(): Balances
        +depositTo(address: Address, amount: decimal): Transaction
        +withdrawFrom(address: Address, amount: decimal): Transaction
    }
    Vault o-- Address : > has_address:{address.hex}
    Vault .. Address : > managed_by:{address.hex}
    Vault *.d. Balances : > has_balances:{address.hex}
}


namespace Accounting {

    abstract class Account {
        Базовая сущность для всех типов аккаунтов
        ==
        +id: str!
        +wallets: list[Wallet]
        +status: Literal["New", "Active", "Blocked"]
        .. Stats ..
        +first_seen_at: datetime
        +last_seen_at: datetime
        +total_transactions: uint64
        .. Risk and fraud related ..
        +fraud_score: float
    }
    
    entity BusinessAccount {
        Эккаунт для ЮЛ
        ==
        .. Public company info ..
        +company_name: str
        +company_inn: str
        +company_ogrn: str
        .. Flow stats ..
        +total_amount: decimal
        +in_flow: decimal
        +out_flow: decimal
        +balance: decimal
        .. Risk and fraud related ..
        +default_risk_score: float
    }
    Account <|-- BusinessAccount
    BusinessAccount o.d. Wallet : > registred_wallets:{wallet.hex}


    entity PrivatePersonAccount {
        Эккаунт для ФЛ
        ==
        .. Public person info ..
        +nicname: str
        .. Agreements ..
        +sign_agreement(agrmnt): bool
        +get_agreements(): list
    }
    Account <|-- PrivatePersonAccount
    PrivatePersonAccount o.d. Wallet : > binding_wallets:{wallet.hex}
}


namespace DigitalRubble {
    entity DigitalRubbleToken {
        Смарт-контракт Цифрового Рубля.
        ==
        .. Transfers ..
        +transfer(from: Address, to: Address, amount: decimal): Transaction
        .. Swap and Exchange ..
        +mint(to: Address, amount: decimal): Transaction
        +burn(from: Address, amount: decimal): Transaction
        .. Fraud and Collateral purposes ..
        +frozen(address: Address, amount: decimal?): Transaction
        +unfrozen(address: Address, amount: decimal?): Transaction
    }
    DigitalRubbleToken o-- Address : > has_address:{address.hex}
    DigitalRubbleToken -d- SmartContract : > deployed_as:{contract.hash}
    DigitalRubbleToken .d. Transaction : > created_in:{transaction.hash}


    class DigitalRubbleBridge {
        Мост (смарт-контракт) для работы с Цифровым Рублем.
        --
        Позволяет пользователям обменивать 
        цифровые активы на фиатные деньги и наоборот.
        ==
        +deposit(from: FiatAccount, to: Address, amount: decimal): Transaction
        +withdraw(from: Address, to: FiatAccount, amount: decimal): Transaction
    }
    DigitalRubbleBridge o.. Address : > has_address:{address.hex}
    DigitalRubbleBridge .. SmartContract : > deployed_as:{contract.hash}
    DigitalRubbleBridge .up. DigitalRubbleToken : < allow_to_swap
}

namespace Gateway {
    entity FiatAccount {
        Фиатный аккаунт.
        --
        Содержит информацию о фиатных (классических)
        банковских счетах.
        Нужен для поддержки работы обмена (swaps) 
        из фиатных валют в цифровые активы.
        ==
        +id: str!
        +frozen(amount: decimal): Transaction
        +unfrozen(amount: decimal): Transaction
        +transferToWallet(wallet: Wallet, amount: decimal): Transaction
    }
    FiatAccount -l- Account : > associated_with:{account.id}

    class Gateway {
        Шлюз для работы с Цифровым Рублем.
        --
        Шлюз позволяет пользователям обменивать 
        цифровые активы на фиатные деньги и наоборот.
        ==
        +get_balances(faccount: FiatAccount): dict[currency, decimal]
        +get_balances(account: Account): dict[token, decimal]
        +get_transactions(): list[Transaction]
        +deposit(amount: decimal): Transaction
        +withdraw(amount: decimal): Transaction
    }
    Gateway .u. FiatAccount : > allow_to_swap
}

@enduml
